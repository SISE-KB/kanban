mongoose.set('debug', true)
User.create(users, function(err, docs) {
    assert.ifError(err);

    var blogposts = [];
    blogposts.push({
      title: 'blog 1',
      tags: ['fun', 'cool'],
      author: userIds[3]
    })
    blogposts.push({
      title: 'blog 2',
      tags: ['cool'],
      author: userIds[1]
    })
    blogposts.push({
      title: 'blog 3',
      tags: ['fun', 'odd'],
      author: userIds[2]
    })

    BlogPost.create(blogposts, function(err, docs) {
      assert.ifError(err);

      /**
       * Population
       */

      BlogPost
      .find({ tags: 'fun' })
      .lean()
      .populate('author')
      .exec(function(err, docs) {
        assert.ifError(err);

        /**
         * Populate the populated documents
         */

        var opts = {
          path: 'author.friends',
          select: 'name',
          options: { limit: 2 }
        }

        BlogPost.populate(docs, opts, function(err, docs) {
          assert.ifError(err);
          console.log('populated');
          var s = require('util').inspect(docs, { depth: null })
          console.log(s);
          done();
        })
      })

User.findById(user.id).select('-salt -hashedPassword').populate('favorites.things').exec(function(err, user){
    if ( err ) return res.json(400, err);

    Thing.populate(user.favorites.things, {
        path: 'creator'
        , select: '-salt -hashedPassword'
    }, function(err, things){
        if ( err ) return res.json(400, err);

        user.favorites.things = things;

        res.send(user.favorites);
    });
});

SchemaA.find({}, 'field1 fieldB', { lean: true })
.populate({
    name: 'fieldB',
    select: 'fieldC',
    options: { lean: true }
}).exec(function (err, result) {
    // not sure how you are populating "result" in your example, as it should be an array, 
    // but you said your code works... so I'll let you figure out what goes here.
});

{
    "__v": 1,
    "_id": "5252875356f64d6d28000001",
    "pages": [
      {
        "__v": 1,
        "_id": "5252875a56f64d6d28000002",
        "page": {
          "components": [
            "525287a01877a68528000001"
          ]
        }
      }
    ],
    "author": "Book Author",
    "title": "Book Title"
  }
Project.find(query)
  .lean()
  .populate({ path: 'pages' })
  .exec(function(err, docs) {

    var options = {
      path: 'pages.components',
      model: 'Component'
    };

    if (err) return res.json(500);
    Project.populate(docs, options, function (err, projects) {
      res.json(projects);
    });
  });
